//menu objects
const bg = create_sprite("https://raw.githubusercontent.com/1358id/SICP/refs/heads/main/img/bg.png");
const title = create_text("SliderCraft: Inertia");
const txt = create_text("Start");
const box = create_sprite("https://raw.githubusercontent.com/1358id/SICP/refs/heads/main/img/box1.png");
const intro = create_text("AboutGame");
const intro_bg = create_sprite("https://raw.githubusercontent.com/1358id/SICP/refs/heads/main/img/intro_bg.png");
const back_menu = create_text("Back");
// game objects
const home  = create_sprite("https://raw.githubusercontent.com/1358id/SICP/refs/heads/main/img/home.png");
const help  = create_sprite("https://raw.githubusercontent.com/1358id/SICP/refs/heads/main/img/help.png");
function upd_menu(bg,title,txt,box,intro,intro_bg,back_menu){
    update_position(bg,[size/2,size/2]);
    update_scale(bg,[1/2,2/3]);
    update_position(title,[size/2,size/2-190]);
    update_scale(title,[2,2]);
    update_position(txt,[size/2+60,size/2+20]);
    update_scale(txt,[2,2]);
    update_position(box,[size/2-40,size/2+190]);
    update_scale(box,[3,3]);
    update_position(intro,[size/2-40,size/2+190]);
    update_position(intro_bg,[-2*size,-2*size]);
    update_position(back_menu,[-2*size,-2*size]);
    update_position(home,[-2*size,-2*size]);
}

function click_start(bg,title,txt,box,intro){
    update_position(bg,[-2*size,-2*size]);
    update_position(title,[-2*size,-2*size]);
    update_position(txt,[-2*size,-2*size]);
    update_position(box,[-2*size,-2*size]);
    update_position(intro,[-2*size,-2*size]);
}
function click_intro(intro_bg){
    update_position(intro_bg,[size/2,size/2+20]);
    update_scale(intro_bg,[4,4]);
    update_position(back_menu,[size/2,size/2+150]);
    update_color(back_menu,[0,0,0,255]);
    update_scale(back_menu,[1.5,1.5]);
}



let game_stat =[];
game_stat[0] = 0;
let show_intro = false;
let is_fade = false;
update_loop(game_state => {
    // if (cnt < 10) {
    //     cnt = cnt + 1;
    //     return undefined;
    // }
    if (game_stat[0]===0){
        upd_menu(bg,title,txt,box,intro,intro_bg,back_menu);
        cnt = cnt + 1;
        if (cnt >= 10) { // 每15帧切换一次状态
            is_fade = !is_fade;
            cnt = 0;
        }

        if (is_fade) {
            update_color(txt, [255, 255, 255, 200]); // 半透明
        } else {
            update_color(txt, [255, 255, 255, 255]); // 不透明
        }
    
        if (input_left_mouse_down()){
            const position = query_pointer_position();
            const x = position[0];
            const y = position[1];//size/2+60,size/2+20
            if (x<=size/2+90 && x>=size/2+30 && y<=size/2+50 && y>=size/2-10){
                click_start(bg,title,txt,box,intro);
                game_stat[0]=1;
            }
            if (x<=size/2-10 && x >=size/2-70 && y<=size/2+220 && y>=size/2+160){
                show_intro = true;
            }
            if (x<=size/2+30 && x>= size/2-30 && y<=size/2+180 && y>= size/2+120){
                // upd_menu(bg,title,txt,box,intro,intro_bg,back_menu);
                update_position(intro_bg,[-2*size,-2*size]);
                update_position(back_menu,[-2*size,-2*size]);
                show_intro = false;
            }
        }
        if (show_intro===true){
                  click_intro(intro_bg); 
                }
    }
    if (game_stat[0]===1){
            init();
        debug_log(get_game_time());
        
        getxy();
        // 
          // Background // update_text(score, "Score: " + stringify(snake_length - start_length));
         upd_map();
        //  update_position(food, [math_floor(math_random() * dwasasdwawagrid) * unit + unit / 2, math_floor(math_random() * grid) * unit + unit / 2]);
         if (las === false) {
             input();
         }
         debug_log(move_dir);
         if (go()) {
             upd_map();
            //  debug_log(x);
            //  debug_log(y);
             las = true;
         }
         else {
             las = false;
    		 if (turn_key_flg) {
    			turn_key_flg = false;
    			turn_key = !turn_key;
    		 }
         }
         update_position(player, [y * unit + unit / 2, x * unit + unit / 2]);
        update_to_top(player);
    
        if (check_passed()) {
            
            move_dir = [0, 0];
            update_position(win, [100, 20]);
            cnt = cnt + 1;
            if (cnt === 10) {
                if (now_level < 2) {
                    now_level = now_level + 1;
                }
                cnt = 0;
                update_position(win, [-100, -120]);
                to_be_init = true;
            }
        }
    }
